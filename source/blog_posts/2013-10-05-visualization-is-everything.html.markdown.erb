---
title: "Visualization is Everything"
date: 2013-10-05 15:11
comments: true
tags: Data Science, Visualizations, Trading
keywords: "Data science, d3.js, ggplot, visualization, data manipulation, exploratory data analysis"
description: "Introducing the new Misapplied Math data visualization gallery"
---

## And with that in mind...

I've introduced a new [visualization gallery](/visualizations) to showcase my graphics and interactive
data, some of which will be post specific, some will stand on their
own. [Exploratory data analysis](https://en.wikipedia.org/wiki/Exploratory_data_analysis) 
helps me see features that don't show up well in summary statistics alone
-- fat tails, outliers, skew, clustering, fit issues, bias, and patterns.
I use R, Python, and Matlab for static visualizations, and I've started playing
around with [d3.js](https://d3js.org/) as a means of generating interactive
graphs.

Until now I always wrote tools for interactive data visualization using java
and C++. I need a few new toys, and given the progress made towards closing 
the gap between native and browser performance, web based development seems like the way to go. Javascript got
fast; it takes a fraction of the time to develop, the frameworks are awesome,
and the results are pretty. I'm setting out to rewrite one of my most data
intensive visualizations (a L2/L3 limit order book viewer) using pure HTML5 and
javascript. At some point I'll put up a screenshot of the result, or a post
mortem on the project if I, like Zuckerberg, 
[put too much faith in HTML5](https://techcrunch.com/2012/09/11/mark-zuckerberg-our-biggest-mistake-with-mobile-was-betting-too-much-on-html5/).

As an initial experiment with d3 I decided to write a tool that shows a quick 
overview of volume and open interest on the CME. You can check
out the end-of-day snapshot [here](/visualizations/cme-product-sectors). The
link given is a simple adaptation of 
[mbostock's](https://bl.ocks.org/mbostock/4063582) tree map visualization. 
[Tree maps](https://en.wikipedia.org/wiki/Treemapping) are a great 
way to visualize hierarchical data, and given the nested structure of product 
sectors and sub sectors, they're a perfect fit.

The version that I use is geared towards real-time surveillance across a
subset of markets, but the general idea is the same. One notes that e-mini (ES)
volume is remarkably high relative to open interest...a pattern made obvious by
switching between the two modes and keeping an eye on ratios.

If you want to play around on your own, or create daily updates, the CME offers publicly 
available end-of-day data on volume and open interest. Feel free to take my code 
(here's the 
[javascript](/visualizations/cme-product-sectors/page.js)) 
and use an adaptation of this quick and dirty parser to convert your data to 
JSON. Note that the **parse_row** function in the code below isn't 
implemented -- it's simple but depends on your input format.

<% code 'python', title: 'encode_json.py' do %>
#!/usr/bin/env python

import sys
import json

class Node(object):
    def __init__(self, parent, name):
        self.parent = parent
        self.name = name
        self.children = []        

class Leaf(Node):
    def __init__(self, parent, name, full_name, volume, open_interest):
        super(Leaf, self).__init__(parent, None)
        self.name = name
        self.full_name = full_name
        self.volume = volume
        self.open_interest = open_interest

class NodeJSONEncoder(json.JSONEncoder):
    def default(self, node):
        if type(node) == Node:
            return { "name":node.name, "children":node.children }
        elif type(node) == Leaf:
            return { "name":node.name, "full_name":node.full_name, 
                "volume":node.volume, "open_interest":node.open_interest }
        raise TypeError("{} is not an instance of Node".format(node))

def get_or_create_node(node_dictionary, parent, name):
    if name in node_dictionary:
        return node_dictionary[name]
    else:
        node = Node(parent, name)
        node_dictionary[name] = node
        parent.children.append(node)
        return node


if __name__ == "__main__":
    
    sectors = dict()
    subsectors = dict()

    root = Node(None, "CME Products")

    with open(sys.argv[1]) as f:
        for row in f.readlines():           
            p = parse_row(row)        
            sector = get_or_create_node(sectors, root, p.sector_name)
            subsector = get_or_create_node(subsectors, sector, p.subsector_name)
            subsector.children.append(Leaf(subsector, p.name, p.full_name, 
                p.volume, p.open_interest))

    print NodeJSONEncoder().encode(root)

<% end %>
